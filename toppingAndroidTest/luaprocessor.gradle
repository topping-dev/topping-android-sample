def applicationId = ""
project.afterEvaluate {
    project.android.applicationVariants.all { variant ->
        applicationId = [variant.mergedFlavor.applicationId, variant.buildType.applicationIdSuffix].findAll().join()
    }
}

gradle.taskGraph.afterTask { task, state ->
    if(task.path.contains("generateDebugResources")
            || task.path.contains("generateReleaseResources"))
    {
        def val = applicationId.replace(".", "/");
        //println "${buildDir}/generated/source/r/" + val + "/"

    }
}

task unzipParser(type: Copy) {
    def zipFile = file("$projectDir/doclua.zip")
    def outputDir = file("$projectDir/")

    from zipTree(zipFile)
    into outputDir
}

preBuild.dependsOn unzipParser

gradle.taskGraph.afterTask { task, state ->
    if(task.path.contains("process") && task.path.contains("Resources"))
    {
        println "Generating LR"
        def outputType = "debug"
        if(task.path.contains("Release"))
            outputType = "release"
        def os = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem
        String[] args = null
        if(os.toFamilyName().equalsIgnoreCase("windows"))
            args = ["cmd", "/c", "java -jar ${projectDir}/parser.jar 1 ${buildDir}/intermediates/compile_and_runtime_not_namespaced_r_class_jar/" + outputType + "/R.jar ${projectDir}/doclua/ " + applicationId + ".R"]
        else
            args = ["sh", "-c", "java -jar ${projectDir}/parser.jar 1 ${buildDir}/intermediates/compile_and_runtime_not_namespaced_r_class_jar/" + outputType + "/R.jar ${projectDir}/doclua/ " + applicationId + ".R"]

        def proc = args.execute()
        proc.in.eachLine {line -> println line}
        //proc.err.eachLine {line -> println 'ERROR: ' + line}
        proc.waitFor()

        if(os.toFamilyName().equalsIgnoreCase("windows"))
            args = ["cmd", "/c", "copy /Y \"${projectDir}\\doclua\\LRR.lua\" \"${projectDir}\\src\\main\\assets\\scripts\\LR.lua\""]
        else
            args = ["sh", "-c", "cp -f \"${projectDir}/doclua/LRR.lua\" \"${projectDir}/src/main/assets/LR.lua\""]

        proc = args.execute()
        proc.in.eachLine {line -> println line}
        proc.err.eachLine {line -> println 'ERROR: ' + line}
        proc.waitFor()
    }
}